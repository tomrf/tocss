//
// flexbox based grid system
//

@import '../config/grid';
@import '../config/breakpoints';

// grid container / "row"
.o-grid {
  display: flex;
  flex-wrap: wrap;
  flex-direction: row;

  &--row-reverse {
    flex-direction: row-reverse;
  }

  &--column {
    flex-direction: column;
  }

  &--column-reverse {
    flex-direction: column-reverse;
  }

  &--nowrap {
    flex-wrap: nowrap;
  }
}

// grid item / "column"
.o-grid__col {
  flex: 1 1 auto;
  margin: calc($grid-column-margin / 2);
  padding: calc($grid-column-padding / 2);

  @for $i from 1 through $grid-columns {
    &--#{$i} {
      flex: 1 1 calc(percentage(math.div($i, $grid-columns)) - $grid-column-margin );
      max-width: calc(percentage(math.div($i, $grid-columns)) - $grid-column-margin );
    }

    &--offset-#{$i} {
      margin-left: calc(percentage(math.div($i, $grid-columns)) + math.div($grid-column-margin, 2));
    }

    &--order-#{$i} {
      order: $i;
    }
  }
}

// breakpoints
@each $breakpoint,
$breakpoint-value in $breakpoints {
  @include breakpoint($breakpoint) {
    @for $i from 1 through $grid-columns {
      .o-grid__col--#{$breakpoint}-#{$i} {
        flex: 1 1 calc(percentage(math.div($i, $grid-columns)) - $grid-column-margin );
        max-width: calc(percentage(math.div($i, $grid-columns)) - $grid-column-margin );
      }

      .o-grid__col--#{$breakpoint}-offset-#{$i} {
        margin-left: calc(percentage(math.div($i, $grid-columns)) + math.div($grid-column-margin, 2));
      }

      .o-grid__col--#{$breakpoint}-order-#{$i} {
        order: $i;
      }
    }
  }
}
